import os.path
import logging
import logging.handlers
import structlog

from app.core.config import settings

shared_processors = [
    structlog.processors.add_log_level,
    # Add structlog context variables to log lines
    structlog.contextvars.merge_contextvars,
    # Add local thread variables to the log lines
    structlog.threadlocal.merge_threadlocal,
    # Adds a timestamp for every log line
    structlog.processors.TimeStamper(fmt="iso"),
    # Add the name of the logger to the record
    structlog.stdlib.add_logger_name,
    # Adds the log level as a parameter of the log line
    structlog.stdlib.add_log_level,
    # Adds parameters about where in the source code the log function called from (file, line...)
    structlog.processors.CallsiteParameterAdder(
        [
            # The name of the function that the log is in
            structlog.processors.CallsiteParameter.FUNC_NAME,
            # The line number of the log
            structlog.processors.CallsiteParameter.LINENO,
        ],
    ),
    # If the log record contains a string in byte format, this will automatically convert it into a utf-8 string
    structlog.processors.UnicodeDecoder(),
]

# Processors that will only apply to records generated by structlog
structlog_only_processors = [
    structlog.stdlib.ProcessorFormatter.wrap_for_formatter,
]


def configure_logging():
    import logging.config

    processors = shared_processors + structlog_only_processors  # noqa
    structlog.configure(
        processors=processors,
        # Defines how the logs will be printed out.
        logger_factory=structlog.stdlib.LoggerFactory(),
        cache_logger_on_first_use=True,
        context_class=structlog.threadlocal.wrap_dict(dict),
        wrapper_class=structlog.stdlib.BoundLogger,  # noqa
    )

    if settings.ENVIRONMENT != "local":
        formatter_processor = structlog.processors.JSONRenderer()
    else:
        formatter_processor = structlog.dev.ConsoleRenderer(sort_keys=True, colors=True)

    config = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "default": {
                "()": structlog.stdlib.ProcessorFormatter,
                "fmt": "%(message)s",
                "processor": formatter_processor,
                "foreign_pre_chain": processors
            },
            # Format log records into jsons
            "json_formatter": {
                "()": structlog.stdlib.ProcessorFormatter,
                "processor": structlog.processors.JSONRenderer(),
                "foreign_pre_chain": shared_processors
            },
            # Format log records into messages intended for the console
            "plain_console": {
                "()": structlog.stdlib.ProcessorFormatter,
                "processor": structlog.dev.ConsoleRenderer(sort_keys=True, colors=True),
                "foreign_pre_chain": shared_processors
            },
            # Format log records in a key=value format
            "key_value": {
                "()": structlog.stdlib.ProcessorFormatter,
                "processor": structlog.processors.KeyValueRenderer(key_order=['timestamp', 'level', 'event', 'logger']),
                "foreign_pre_chain": shared_processors
            },
        },
        "handlers": {
            # Output logs to console
            "console": {
                "class": "logging.StreamHandler",
                "formatter": "plain_console",
            },
            # Output logs to file in json format
            "json_file": {
                "class": "logging.handlers.WatchedFileHandler",
                "filename": os.path.join(settings.LOG_DIR, 'json.log'),
                "formatter": "json_formatter",
            },
            # Output logs to file in a simple "key1=value1 key2=value2" format
            "flat_line_file": {
                "class": "logging.handlers.WatchedFileHandler",
                "filename": os.path.join(settings.LOG_DIR, "flat_line.log"),
                "formatter": "key_value",
            },
        },
        "loggers": {
            "": {
                "handlers": ["console", "json_file", "flat_line_file"],
                "level": settings.LOG_LEVEL,
            },
            "asyncio": {
                "handlers": ["console", "json_file", "flat_line_file"],
                "level": settings.LOG_LEVEL,
            },
            "uvicorn": {
                "handlers": ["console", "json_file", "flat_line_file"],
                "level": settings.LOG_LEVEL,
            },
            "fastapi": {
                "handlers": ["console", "json_file", "flat_line_file"],
                "level": settings.LOG_LEVEL,
            },
            "sqlalchemy": {
                "handlers": ["console", "json_file", "flat_line_file"],
                "level": "ERROR",
            },
            "strawberry": {
                "handlers": ["console", "json_file", "flat_line_file"],
                "level": settings.LOG_LEVEL,
            },
            "celery": {
                "handlers": ["console", "json_file", "flat_line_file"],
                "level": settings.LOG_LEVEL,
            },
        }
    }

    logging.config.dictConfig(config)
